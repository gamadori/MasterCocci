=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "AS1"       (component AsynchroSerial)
   - AS1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the preferred 
                method to handle error and break exception in the interrupt mode is to use events <OnError> and <OnBreak> the 
                return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the information about an 
                exception in interrupt mode is returned only if there is a valid character ready to be read. [ Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU 
                and the receiver is configured to use DMA controller then this method only sets the selected DMA channel. Then 
                the status of the DMA transfer can be checked using GetCharsInRxBuf method. See an example of a typical usage 
                for details about the communication using DMA.
   - AS1_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets selected DMA channel. Then the status of the DMA transfer can 
                be checked using GetCharsInTxBuf method. See an example of a typical usage for details about communication 
                using DMA.
   - AS1_RecvBlock -If any data is received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns an error code (it does not wait for data).  This method is available only if non-zero 
                length of the input buffer is defined and the receiver property is enabled.  If less than requested number of 
                characters is received only the available data is copied from the receive buffer to the user specified 
                destination. The value ERR_EXEMPTY is returned and the value of variable pointed by the Rcv parameter is set to 
                the number of received characters. [ Version specific information for Freescale 56800 derivatives ]   DMA mode: 
                If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then 
                this method only sets the selected DMA channel. Then the status of the DMA transfer can be checked using 
                GetCharsInRxBuf method. See an example of a typical usage for details about communication using DMA.
   - AS1_SendBlock -Sends a block of characters to the channel.  This method is available only if non-zero length of the output 
                buffer is defined and the transmitter property is enabled.  [ Version specific information for Freescale 56800 
                derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured 
                to use DMA controller then this method only sets the selected DMA channel. Then the status of the DMA transfer 
                can be checked using GetCharsInTxBuf method. See typical usage for details about communication using DMA.
   - AS1_ClearRxBuf -Clears the receive buffer.  This method is available only if non-zero length of the input buffer is 
                defined and the receiver property is enabled. [ Version specific information for Freescale 56800 derivatives ]  
                DMA mode:  If DMA controller is available on the selected CPU and the receiver is configured to use DMA 
                controller then this method only stops selected DMA channel.
   - AS1_ClearTxBuf -Clears the transmit buffer.  This method is available only if non-zero length of the output buffer is 
                defined and the receiver property is enabled. [ Version specific information for Freescale 56800 derivatives ]  
                DMA mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only stops selected DMA channel.
   - AS1_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the receiver 
                property is enabled. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on the selected CPU and the receiver is configured to use DMA controller then this 
                method returns the number of characters in the receive buffer.
   - AS1_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  
                If DMA controller is available on the selected CPU and the transmitter is configured to use DMA controller then 
                this method returns the number of characters in the transmit buffer.

Module "CAN1"      (component FreescaleCAN)
   - CAN1_Enable -Enables the component - it turns on the send and receive functions. Events may be generated 
                ("DisableEvent"/"EnableEvent").
   - CAN1_SetAcceptanceCode -Sets the message ID of the given message buffer. Buffer ID is used for message filtering of 
                incoming frames.
   - CAN1_SetAcceptanceMask -Sets the acceptance mask registers. This method writes an acceptance mask directly to the 
                acceptance mask registers.
   - CAN1_SendFrame -Sends a frame via the CAN device. Using this method the user can send own message to the CAN bus. This 
                method allows to specify CAN buffer number, message ID, data to be sent, frame type (DATA_FRAME/REMOTE_FRAME) 
                and whether the message will be sent after the request comes.
   - CAN1_ReadFrame -Reads a frame from the CAN device. The user is informed about CAN reception through OnFullRxBuffer event 
                or GetStateRX method.
   - CAN1_GetStateTX -Returns the value of the transmission complete flags (register FCIFLAG1).
   - CAN1_GetStateRX -Returns the value of the reception complete flags (register FCIFLAG1).
   - CAN1_GetError -Returns the content of the receiver flag register.
   - CAN1_SetBufferCode -Sets up the message buffer code for the appropriate message buffer. This method is always enabled 
                because it is used internally.

Module "TI1"       (component TimerInt)

Module "SM1"       (component SynchroMaster)
   - SM1_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it does not 
                wait for data).   For information about SW overrun behavior please see <General info page>. [ Version specific 
                information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on selected CPU and 
                receiver is configured to use DMA controller then this method only sets the selected DMA channel. Status of the 
                DMA transfer can then be checked using method GetCharsInRxBuf. See typical usage for details about 
                communication using DMA.
   - SM1_SendChar -Sends one character to the channel. [ Version specific information for Freescale 56800 derivatives ]   DMA 
                mode:  If DMA controller is available on the selected CPU and the transmitter is configured to use DMA 
                controller then this method only sets the selected DMA channel. The status of the DMA transfer can then be 
                checked using GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SM1_RecvBlock -If any data received, this method returns the block of the data and its length (and incidental error), 
                otherwise it returns error code (it does not wait for data).  If less than requested number of characters is 
                received only the available data is copied from the receive buffer to the user specified destination and the 
                ERR_EXEMPTY value is returned.  This method is available only if non-zero length of input buffer is defined.    
                For information about SW overrun behavior please see <General info page>. [ Version specific information for 
                Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the receiver 
                is configured to use DMA controller then this method only sets the selected DMA channel. The status of the DMA 
                transfer can then be checked using GetCharsInRxBuf method. See the typical usage for details about 
                communication using DMA.
   - SM1_SendBlock -Send a block of characters to the channel. This method is only available if a non-zero length of output 
                buffer is defined. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA 
                controller is available on the selected CPU and transmitter is configured to use DMA controller then this 
                method only sets the selected DMA channel. The status of the DMA transfer can then be checked using 
                GetCharsInTxBuf method. See the typical usage for details about communication using DMA.
   - SM1_ClearRxBuf -Clears the receive buffer. This method is available only if a non-zero length of input buffer is defined. 
                [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on 
                the selected CPU and the receiver is configured to use DMA controller then this method only stops the selected 
                DMA channel.
   - SM1_ClearTxBuf -Clears the transmit buffer. This method is only available if a non-zero length of output buffer is defined.
                [ Version specific information for Freescale 56800 derivatives ]   DMA mode:  If DMA controller is available on 
                the selected CPU and the transmitter is configured to use DMA controller then this method only stops the 
                selected DMA channel.
   - SM1_GetCharsInRxBuf -Returns the number of characters in the input buffer.  Note: If the Interrupt service is disabled, 
                and the Ignore empty character is set to yes, and a character has been received, then this method returns 1 
                although it was an empty character. [ Version specific information for Freescale 56800 derivatives ]   DMA mode:
                If DMA controller is available on the selected CPU and the receiver is configured to use DMA controller then 
                this method returns the number of characters in the receive buffer.
   - SM1_GetCharsInTxBuf -Returns the number of characters in the output buffer. [ Version specific information for Freescale 
                56800 derivatives ]   DMA mode:  If DMA controller is available on the selected CPU and the transmitter is 
                configured to use DMA controller then this method returns the number of characters in the transmit buffer.
   - SM1_GetError -Returns a set of errors on the channel (errors that cannot be returned in given methods). The component 
                accumulates errors in a set; after calling [GetError] this set is returned and cleared. This method is 
                available only if the "Interrupt service/event" property is enabled.

Module "CSOutput"  (component BitIO)
   - CSOutput_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - CSOutput_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - CSOutput_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - CSOutput_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - CSOutput_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "CSInput"   (component BitIO)
   - CSInput_SetDir -Sets a pin direction (available only if the direction = _[input/output]_).
   - CSInput_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - CSInput_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - CSInput_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - CSInput_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.

Module "Cpu"       (component MC56F84451VLF)
   - Cpu_EnableInt -Enables all maskable interrupts
   - Cpu_DisableInt -Disables all maskable interrupts
   - Cpu_SetWaitMode -Sets low power mode - Wait mode.   For more information about the wait mode see this CPU documentation.   
                Release from wait mode: Reset or interrupt
   - Cpu_SetStopMode -Sets low power mode - Stop mode.   For more information about the stop mode see this CPU documentation.

===================================================================================
